/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WorkBreakRouteImport } from './routes/work-break'
import { Route as MicroBreakRouteImport } from './routes/micro-break'
import { Route as ConfigRouteImport } from './routes/config'
import { Route as IndexRouteImport } from './routes/index'

const WorkBreakRoute = WorkBreakRouteImport.update({
  id: '/work-break',
  path: '/work-break',
  getParentRoute: () => rootRouteImport,
} as any)
const MicroBreakRoute = MicroBreakRouteImport.update({
  id: '/micro-break',
  path: '/micro-break',
  getParentRoute: () => rootRouteImport,
} as any)
const ConfigRoute = ConfigRouteImport.update({
  id: '/config',
  path: '/config',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/config': typeof ConfigRoute
  '/micro-break': typeof MicroBreakRoute
  '/work-break': typeof WorkBreakRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/config': typeof ConfigRoute
  '/micro-break': typeof MicroBreakRoute
  '/work-break': typeof WorkBreakRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/config': typeof ConfigRoute
  '/micro-break': typeof MicroBreakRoute
  '/work-break': typeof WorkBreakRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/config' | '/micro-break' | '/work-break'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/config' | '/micro-break' | '/work-break'
  id: '__root__' | '/' | '/config' | '/micro-break' | '/work-break'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ConfigRoute: typeof ConfigRoute
  MicroBreakRoute: typeof MicroBreakRoute
  WorkBreakRoute: typeof WorkBreakRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/work-break': {
      id: '/work-break'
      path: '/work-break'
      fullPath: '/work-break'
      preLoaderRoute: typeof WorkBreakRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/micro-break': {
      id: '/micro-break'
      path: '/micro-break'
      fullPath: '/micro-break'
      preLoaderRoute: typeof MicroBreakRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/config': {
      id: '/config'
      path: '/config'
      fullPath: '/config'
      preLoaderRoute: typeof ConfigRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ConfigRoute: ConfigRoute,
  MicroBreakRoute: MicroBreakRoute,
  WorkBreakRoute: WorkBreakRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
